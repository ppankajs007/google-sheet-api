## Open Google Console Account
## Enable GoogleSheet Api library
## Create project Name
## create Api Service 
## create auth client id
## create service account 

## without gmail authenticate using service account json details.
## with gmail authenticate using auth account json.


<?php

require __DIR__ . '/../vendor/autoload.php';

class GoogleService {

    private $credentialsFile;
    private $spreadsheetId;
    private $redirectUri;
    private $client;
    private $service;
    
    function __construct(){
        //$this->credentialsFile = __DIR__ . "/credentials.json";
        $this->credentialsFile = __DIR__ . "/serviceAccount.json"; // this file download from Service Accounts
        $this->spreadsheetId = 'sheetId'; // google sheet id
        $this->redirectUri = 'https://' . $_SERVER['HTTP_HOST'] . '/abc/oauth2callback.php';
        $this->googleClient();
        
    }

    function googleClient(){
        try{
            if (!$this->client) {
                $this->client = new Google_Client();
                $this->client->setAuthConfig($this->credentialsFile);
                $this->client->addScope(Google_Service_Sheets::SPREADSHEETS);
                $this->client->setAccessType('offline');
                $this->client->setSubject('abc@focus-storm-44444-s4.iam.gserviceaccount.com'); // create by serve account mail
            }
        }catch (Exception $e) {
            return $e->getMessage();
        }
        
    }

    function services($row){
        try{
            $service = new Google_Service_Sheets($this->client);
            $spreadsheetId = $this->spreadsheetId;

            $range = 'Sheet1!A1';
            $values = [$row];
            $body = new Google_Service_Sheets_ValueRange([ 'values' => $values ]);
            $params = [ 'valueInputOption' => 'USER_ENTERED' ];
            $result = $service->spreadsheets_values->append($spreadsheetId, $range, $body, $params);
            
            $response = $result->getUpdates();
            $updatedRange = $response->getUpdatedRange();
            $updatedRows = $response->getUpdatedRows();
            
            if ($updatedRange && $updatedRows > 0) {
                return [
                    "status" => 1,
                    "message" => "Rows appended successfully to range: $updatedRange",
                    "data" => $row
                ];
            } else {
                return [
                    "status" => 0,
                    "message" => "No rows appended or operation failed.",
                    "data" => $row
                ];
            }
        }catch (Exception $e) {
            return $e->getMessage();
        }
        
    }

    function oauthRedirection(){
        $this->client = new Google_Client();
        $this->client->setAuthConfig($this->credentialsFile);
        $this->client->addScope(Google_Service_Sheets::SPREADSHEETS);
        $this->client->setRedirectUri($this->redirectUri);
        return $this->client;
    }

    function createAuthUrl(){
        $client = $this->oauthRedirection();
        return $client->createAuthUrl();
    }

    function authenticate($code){
        $client = $this->oauthRedirection();
        $client->authenticate($code);
        $_SESSION['access_token'] = $client->getAccessToken();
    }

    function getAccessToken(){
        return $_SESSION['access_token'] ?? null;
    }
}
